#!/usr/bin/env bash

THIS_SCRIPT="$( readlink -f "${BASH_SOURCE[0]}" )"

NOTIFICATION_ID=""

# A notification will be shown after this time of inactivity (seconds)
INACTIVITY_TIMEOUT=300

# After notification, the screen will be locked after this time if no activity
# is detected (seconds)
NOTIFICATION_DURATION=10

list_outputs() {
  echo TODO
}

undim_output() {
  echo TODO
}

dim_output() {
  echo TODO
}

for_each_output() {
  for out in $( list_outputs ); do
    $1 $out
  done
}

undim() {
  for_each_output undim_output
}

dim() {
  for_each_output dim_output
}

notify_new() {
  NOTIFICATION_ID=$( notify-send --urgency=normal --expire-time=1000 --transient --print-id "${1}" )
}

notify_replace() {
  notify-send --urgency=normal --expire-time=1000 --transient --replace-id=${NOTIFICATION_ID} "${1}"
}

stop_lock() {
  echo TODO
}

notify() {
  notify_new "Locking in ${NOTIFICATION_DURATION} seconds"

  # See xss-lock signal handling for details
  # The notifier is killed when X signals user activity or when the locker is
  # started.
  # So when we receive a TERM signal, we know that the locker is started or
  # that the user is active.
  trap "exit 0" TERM INT
  trap 'stop_lock' EXIT

  dim

  for i in $( seq 1 $((NOTIFICATION_DURATION - 1)) ); do
    notify_replace "Locking in $((NOTIFICATION_DURATION - i)) seconds"
    # Background sleep to allow signal handling during sleep (exit as soon as
    # user activity is detected)
    sleep 1 &
    wait
  done

  sleep infinity &
  wait
}

start() {
  echo TODO
}

lock() {
  echo TODO
  notify-send "TODO"
}

main() {
  case $1 in
    start) start;;
    notify) notify;;
    lock) lock;;
  esac
}

main "$@"
