################################################################################
# Git Config
################################################################################

[push]
	default = current

[color]
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[alias]
	# add
  a = add                           # add
  A = add -A                        # add
  chunkyadd = add --patch           # stage commits chunk by chunk

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  b = branch -v                     # branch (verbose)

  # show branches, sort by date, colourful (https://stackoverflow.com/questions/5188320)
  bb = for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:short)%(color:reset))'
  bba = for-each-ref --sort=-committerdate refs/heads/ refs/remotes/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:short)%(color:reset))'

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change

  # log
  l = log --graph --pretty=format:'%C(yellow)%h %C(blue)%ad %C(reset)%s %Cred%d %C(blue) %an' --date='format-local:%Y-%m-%d %H:%M'
  ll = log --graph --date=short
  lf = log --follow --find-renames --pretty=format:'%C(yellow)%h %C(blue)%ad %C(reset)%s %Cred%d %C(blue) %an' --date='format-local:%Y-%m-%d %H:%M'
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  graph = log --graph --simplify-by-decoration --pretty=format:'%d' --all
  loggraph = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%n' --abbrev-commit --date=relative --branches

  # pull
  pl = pull                         # pull

  # Set upstream of current branch to origin branch with same name
  rembra = !"rembra() { b=$( git rev-parse --abbrev-ref HEAD ); git branch --set-upstream-to=origin/$b $b; git pull; }; rembra"

  # push
  ps = push                         # push

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  r = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  ignore-tracked = update-index --assume-unchanged

  # delete remote branch
  remdel = push origin --delete

[core]
  excludesfile = ~/.gitignore
  autocrlf = false
  pager = delta

[fetch]
  prune = true

[rebase]
  autosquash = true

[include]
  path = ~/.gitconfig.local

[mergetool]
  prompt = false

[mergetool "vimdiff"]
  cmd="vim -c 'Gdiff' $MERGED" # use fugitive.vim for 3-way merge
  keepbackup=false

[merge]
  summary = true
  verbosity = 1
	tool = meld
	## no one likes merge commits. Force fast-forward. When not possible, you'll get a gentle reminder to a rebase.
	## To force merge: `git merge --no-ff`
  ff = only

[diff]
	# Detect copies as well as renames
	renames = copies

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C
[credential]
	helper = store
[cola]
	spellcheck = false
[pull]
	ff = only
[init]
	defaultBranch = main
