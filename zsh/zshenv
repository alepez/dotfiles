## @filename: ~/.zshenv

# speed up
skip_global_compinit=1

################################################################################
## alias {{{

export EDITOR='nvim'

# Create directory and cd into it
D() { mkdir -p $1 && cd $1 }

# Go to workspace
alias W='cd ~/workspace'

# Open file with default application
alias O='xdg-open'

# Start editing dotfiles
alias dot='cd ~/.dotfiles && vim'

# time and date
alias today='date +%Y-%m-%d --utc | tr -d \\n'
alias now='date +%Y-%m-%dT%H:%M:%S --utc | tr -d \\n'

# Create new tmp directory and cd into it
alias DD='D ~/tmp/$(now)'

# Generate strong password and copy to clipboard
genpassword() {
  file=$( mktemp );
  pwgen --capitalize --numerals --ambiguous --symbols 16 1 -1 > "${file}";
  xclip -i < "${file}";
  cat "${file}";
  rm "${file}";
  notify-send "Password copied to clipboard";
}

# Shortcut for my favorite editor
alias v="${EDITOR}"

# Filesystem usage, human readable
alias df='df -h'
alias du='du -sh'

# neomutt instead of mutt
alias mutt="neomutt"
alias E="neomutt"

# List and grep
alias lsg='ll | grep'

# List last files
lslast() { ls -t $@ | head; }

# Brutally kill
alias ka9='killall -9'
alias k9='kill -9'

highlight() { grep --color -E "$1|\$"; }

# I don't use dc, and sometime i mispell cd
alias dc='cd'

## fuzzy find password with `pass` password manager
## See
## - http://www.passwordstore.org/
## - https://github.com/junegunn/fzf
Pass() {
  local passpath=$( cd ~/.password-store && git ls-files | grep -v "^\." | fzf-tmux | sed "s/\.gpg$//" );
  pass -c "${passpath}";
  pass "${passpath}";
}

## Docker {{{

## I use docker so often I need this
alias dk="docker"
alias dkps="docker ps --format \"table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\""
alias dklog='docker logs --tail 10 -f'

## A better docker stat
## Thanks to rbravo-avantrip
## https://github.com/docker/docker/issues/20973#issuecomment-245036858
dkstats() {
  while true; do
    TEXT=$(docker stats --no-stream $(docker ps --format={{.Names}}));
    sleep 0.5;
    clear;
    echo "$TEXT";
  done
}

# Rebuild and restart a single container with docker-compose
# or just do not specify the container name and all containers in the docker-compose
# file will be rebuilded and restarted.
dkup() {
  docker-compose build ${1} && \
  docker-compose stop ${1} && \
  docker-compose up -d --no-deps ${1}
}

## }}}

## NodeJS {{{

# Pre-setup nvm
alias nvminit='[[ -s ~/.nvm/nvm.sh ]] && . ~/.nvm/nvm.sh'

# Automatically setup nodejs environment with nvm and start node repl
node_setup() {
  # Note: zsh >= 5.3 should use `-v` to check if NVM_BIN is available, but I'm
  # still using older zsh in some host.
  # if ! [[ -v NVM_BIN ]]; then
  if [ -z "${NVM_BIN+1}" ]; then
    nvminit && nvm use default
  fi
}

node() {
  node_setup
  "${NVM_BIN}/node" $@
}

# vim editor with nodejs environment
vjs() {
  node_setup
  ${EDITOR}
}

alias npmi="npm install --save"
alias npmid="npm install --save-dev"

## }}}

################################################################################
## Git Aliases {{{
## See ~/.gitconfig
alias ga='git add'            # Add files to the index
alias gA='git add -A'         # Add all files, remove from index deleted files
alias grv='git remote -v'     # show all Remotes Verbosely
alias glog='git l'            # log --graph --date=short
alias gdh='git diff HEAD'     # show all changes from Head
alias gdu='gd'                # show Unstaged changes
alias gdc='git dc'            # show Unstaged changes
alias gds='git diff --cached' # show Staged changes
alias gpl='git pull'          # Pull
alias gps='git push'          # Push
alias gnb='git nb'            # New Branch aka checkout -b
alias gco='git co'            # Checkout
alias gamend='git commit --amend'

# Quick merge from origin/master, no fast forward
gqm() { if [ -z "${1}" ]; then git status -bs; echo -e "\nbranch?"; return; fi; git fetch ; git merge origin/${1} --no-ff }

## Commit, message as arguments, quotes not needed
gcm() { git commit -m "$*" }

## Add all files, Commit, Message as argument
#function gacm { git add -A && git commit -m "$*" }
#alias gcam="gacm" # Correct mistyping
#alias gg="gacm" # I do this so many times a need a shortcut

## Add all files, Commit, use editor for message
gac() { git add -A && git commit }

## Add all files, Commit, Message as argument, then Push
gacmps() { git add -A && git commit -m "$*" && git push }
alias ggo="gacmps" # Go! shortcut for gacmps

## Clean all untracked files
git-superclean() { read -q "REPLY?Sure? "; if [ "${REPLY}" = 'y' ]; then echo && git reset --hard && git clean -ffdx; fi }

## Difference with commond ancestor
git-diffanc() {
  local main_branch;
  test -n "${2}" && main_branch="${2}" || main_branch="$( git rev-parse --abbrev-ref HEAD )"
  git diff $( git merge-base "${1}" "${main_branch}" ) "${1}"
}

## Update recursively all submodules
git-subsync() {
  git submodule sync --recursive && git submodule update --recursive --remote
}

git-huge-finder() {
  git rev-list --objects --all \
  | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
  | sed -n 's/^blob //p' \
  | sort --numeric-sort --key=2 \
  | cut -c 1-12,41- \
  | numfmt --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest
}

alias gll='git ll'

## }}}

################################################################################
## rsync ssh tunnel with ControlPath {{{
## see: http://unix.stackexchange.com/a/50515/12662
ssh-rsync-fast-start() {
  mkdir -p ~/.ssh/ctl
  ssh -nNf -o ControlMaster=yes -o ControlPath="$HOME/.ssh/ctl/%L-%r@%h:%p" $@
}

ssh-rsync-fast() {
  rsync -e "ssh -o 'ControlPath=$HOME/.ssh/ctl/%L-%r@%h:%p'" $@
}

ssh-rsync-fast-stop() {
  ssh -O exit -o ControlPath="$HOME/.ssh/ctl/%L-%r@%h:%p" $@
}
## }}}

################################################################################
## SSH {{{
alias sshpubkey="ssh-add -L |  head -1 | xclip"

sshconf() {
  local args='';
  if [ -n "${1}" ]; then args="-c /Host ${1}"; fi
  ${EDITOR} ${HOME}/.ssh/config ${args}
}
## }}}

################################################################################
## Svn Aliases {{{

# svn diff with colors
svndiff() {
  svn diff $@ | colordiff | less
}

alias sst='svn status'
alias sa='svn add'
alias sd='svndiff'
scm() { svn commit -m "$*" }
slog() { svn log $@ | less }
## }}}

################################################################################
## Git/Subversion shortcuts {{{
## These shortcuts works both with Git and Subversion repository

test_repo_git() { git rev-parse &>/dev/null }
test_repo_svn() { svn info &>/dev/null }

gd() {
  if test_repo_git; then gdh $@; return; fi
  if test_repo_svn; then svndiff $@; return; fi
}

gs() {
  if test_repo_git; then git status; return; fi
  if test_repo_svn; then svn status; return; fi
}

gl() {
  if test_repo_git; then glog $@; return; fi
  if test_repo_svn; then slog $@; return; fi
}

## }}}
################################################################################
## nvim {{{
# vim airline themes not working with this variabile set
# see https://www.reddit.com/r/neovim/comments/44cnud/gruvbox_colors_are_off_when_i_enable_truecolor/
# export NVIM_TUI_ENABLE_TRUE_COLOR=1
## }}}
################################################################################

## scaling governor {{{
governor() {
  if [  -n "${1}" ]; then
    for c in $(ls -d /sys/devices/system/cpu/cpu[0-9]*); do
      echo "${1}" | sudo tee $c/cpufreq/scaling_governor > /dev/null
    done
  else
    echo "Available governors:"
    cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors
  fi
}
## }}}

## backup {{{
backup_tar() { tar cpvf "${1}~$( date +%Y%m%d-%H%M%S ).tar" "${1}"; }
backup_cp() { cp -a "${1}" "${1}~$( date +%Y%m%d-%H%M%S )~"; }
backup_mv() { mv "${1}" "${1}~$( date +%Y%m%d-%H%M%S )~"; }
## }}}

################################################################################
## minecraft {{{
minecraft-backup() {
  local root_dir="${HOME}/.minecraft"
  local src_dir="saves"
  local dir="${HOME}/.minecraft-backup"
  local archive_dir="${HOME}/.minecraft-backup"
  local archive="${archive_dir}/$( date +%Y%m%d-%H%M%S ).tar"
  echo "Saving to ${archive}"
  cd ${root_dir} && tar cpvf ${archive} ${src_dir} && ls -lh ${archive}
}
## }}}

################################################################################
## tmux {{{
## Needed for true color support. tmux.conf must match this.
export TERM=screen-256color
## }}}

###############################################################################
## Source local configurations
if [ -e ~/.zshenv.local ]; then source ~/.zshenv.local; fi

